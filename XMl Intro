-the XML does not DO anything. XML is just information wrapped in tags.
-XML was designed to carry data - with focus on what data is
-XML tags are not predefined like HTML tags are
-XML simplifies data sharing- Exchanging data between  upgraded systems is a time-consuming task. Large amounts of data must be converted, and incompatible data is often lost. but XML data supported in all upgraded platform as well, either its is browser or any systm.
-XML simplifies data transport- XML stores data in plain text format. This provides a independent way of storing, transporting, and sharing data.
-XML simplifies platform changes - XML also makes it easier to expand or upgrade to new operating systems, new applications, or new browsers, without losing data.
-XML simplifies data availability - data can be available to all kinds of "reading machines" like people, computers, voice machines, news feeds, etc.

What is XML?
     1. XML is W3c Recommendation in 1998.
     2. XMl - Extensible Markup Language, X-extensible means you can make your own tags
Xml is foundation of several popular information format
     1.Microsoft office- uses word, excel and powerpoint files
     2.SVG - Scalable Vector Garphics
     3.Web Services- SOAP is used for enterprise data exchange
     4.RSS/ATOM - used to publish blogs
     5. DocBook - uses XMl to represent technical documentation
XML Technologies
     1.XPath:(eXtensible) XML path language, used to query XML data
     2.XSLT:Extensible Stylesheet language Tarnsformation, use to convert XML file to someother format or else in XML format only.The XML document below, is a document used to transform XML into HTML.
            The namespace "http://www.w3.org/1999/XSL/Transform" identifies XSLT elements inside an HTML document:
     3.Xquery; like XPath more advanced querying language than XPath
     4.XPointer/XLink: links between and within XML documents
Note: Xquery, XPointer/XLink are more advance and complex

Valid XML Documnet
When the XML parse processes the Document correctly and the rule that you defined, then the document is valid.
Two ways we can valid the XML
1.DTD(Document type definitions)
 - simple to use, but not very powerful
 - written using a syntax that is different from XML
2.XML schemea
 - Much more powerful and flexible than DTDs
 - Written using XML Syntax 

XMl Namespaces
-prevent Tags from different languages from conflicting
<?xml version="1.0" encoding="UTF-8"?> - optional
-version- version of xml file
-encoding="UTF-8"- Unicode Transformation Format, 8-bit encoding ASCII-based systems and enables use of all the characters in the Unicode standard.
-The XML prolog does not have a closing tag! This is not an error. The prolog is not a part of the XML documen
-XML Tags are Case Sensitive
Entity References 
-If you place a character like "<" inside an XML element, it will generate an error because the parser interprets it as the start of a new element.
-This will generate an XML error:
   <message>salary < 1000</message>
-to avoid this error, replace the "<" character with an entity reference:
   <message>salary &lt; 1000</message>
-There are 5 pre-defined entity references in XML:

   &lt;	<	less than
   &gt;	>	greater than
    &amp;	&	ampersand 
   &apos;	'	apostrophe
   &quot;	"	quotation mark
Only < and & are strictly illegal in XML, but it is a good habit to replace > with &gt; as well.
- XML does not truncate multiple white-space
- CRLF- Carriage Return + Line Feed = "\r\n"
- Windows applications store a new line as: carriage return and line feed (CR+LF).(Use W3 school)
- Carriage Return- "\r"- It is used to move the cursor to the beginning of the line, effectively "returning" it to the start. 
- Line Feed - "\n"

XML Naming Rules
1.XML elements must follow these naming rules:
2.Element names are case-sensitive
3.Element names must start with a letter or underscore
4.Element names cannot start with the letters xml (or XML, or Xml, etc)
5.Element names can contain letters, digits, hyphens, underscores, and periods
6.Element names cannot contain spaces
7.Any name can be used, no words are reserved (except xml).

Conflicts between 2 XML File
-Name Conflicts
In XML, element names are defined by the developer. This often results in a conflict when trying to mix XML documents from different XML applications.
Solving the Name Conflict Using a Prefix
Name conflicts in XML can easily be avoided using a name prefix.
This XML carries information about an HTML table, and a piece of furniture:
<h:table>
  <h:tr>
    <h:td>Apples</h:td>
    <h:td>Bananas</h:td>
  </h:tr>
</h:table>

<f:table>
  <f:name>African Coffee Table</f:name>
  <f:width>80</f:width>
  <f:length>120</f:length>
</f:table>
In the example above, there will be no conflict because the two <table> elements have different names.

XML Namespaces - The xmlns Attribute
-When using prefixes in XML, a namespace for the prefix must be defined.
-The namespace can be defined by an xmlns attribute in the start tag of an element.
-The namespace declaration has the following syntax. xmlns:prefix="URI".
-When a namespace is defined for an element, all child elements with the same prefix are associated with the same namespace.
-Namespaces can also be declared in the XML root element:
(Refer W3)

<root xmlns:h="http://www.w3.org/TR/html4/"
xmlns:f="https://www.w3schools.com/furniture">
<root xmlns:h="http://www.w3.org/TR/html4/"
xmlns:f="https://www.w3schools.com/furniture">

<h:table>
  <h:tr>
    <h:td>Apples</h:td>
    <h:td>Bananas</h:td>
  </h:tr>
</h:table>

<f:table>
  <f:name>African Coffee Table</f:name>
  <f:width>80</f:width>
  <f:length>120</f:length>
</f:table>

</root>

